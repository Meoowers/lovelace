(require "./src/std.lisp")
(require "./src/compiler/env.lisp")
(require "./src/compiler/lexer.lisp")
(require "./src/compiler/parser.lisp")
(defn lovelace/at-least (num) (fn (node span)
    (when (< (length node) num)
        (throw (concat "expected at least " (string num) " arguments but got " (string (length node))) span))))
(defn lovelace/exact (num) (fn (node span)
    (when (!= (length node) num)
        (throw (concat "expected " (string num) " arguments but got " (string (length node))) span))))
(defn lovelace/args (node fun)
    (check node "list")
    (apply fun (list node (span node)))
    node)
(defn lovelace/specialize/let (node)
    (lovelace/args node (lovelace/at-least 3))
    (let ((body (at (list/split node 2) 1))
          (args (at node 1)))
    (check args "list")
    (list/map args (fn (arg)
        (block
            (check arg "list")
            (lovelace/args arg (lovelace/exact 2))
            (check (at arg 0) "identifier")
            (lovelace/specialize (at arg 1)))))
    (list/map body lovelace/specialize)))
(defn lovelace/specialize/set* (node)
    (lovelace/args node (lovelace/exact 3))
    (let ((name (at node 1))
          (value (lovelace/specialize (at node 2))))
    `(set* ,name ,value)))
(defn lovelace/specialize (node)
   (switch (type node)
        ("string" node)
        ("number" node)
        ("atom" node)
        ("list"
            (if (= 0 (length node))
                node
                (let ((fst (head node)))
                (cond
                    ((= fst 'let) (lovelace/specialize/let node))
                    ((= fst 'block) (lovelace/specialize/block node))
                    ((= fst 'set*) (lovelace/specialize/set* node))
                    ((= fst 'set) (lovelace/specialize/set node))
                    ((= fst 'fn) (lovelace/specialize/fn node))
                    ((= fst 'quote) (lovelace/specialize/quote node))
                    ((= fst 'while) (lovelace/specialize/while node))
                    ((= fst 'if) (lovelace/specialize/if node))
                    ((= fst 'macro) (lovelace/specialize/macro node))
                    (:true fst)))))))